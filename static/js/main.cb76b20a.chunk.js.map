{"version":3,"sources":["definitions.ts","onboarding-page/OnboardingPage.tsx","move-holder/MoveHolder.tsx","game-board/player-controls/PlayerControls.tsx","game-board/GameBoard.tsx","ConsoleLogger.ts","Game.ts","GameStrategies/DivideBy.ts","Possibilities/DivideByThreePossibility.ts","WinningStrategies/WinByGettingOneStrategy.ts","WinningStrategies/DefaultGameBuilder.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MoveValues","OnboardingPage","props","game","state","enterRoomNumberVisible","this","onCreated","params","moveToGameBoard","onAccepted","create","roomId","join","history","push","Search","Input","className","onClick","initializeNewGame","bind","type","block","content","Fragment","onSearch","value","joinExistingGame","placeholder","enterButton","title","trigger","visible","setState","React","Component","MoveHolder","previousValue","playedMove","remainder","isSelf","message","color","SocketEvent","AllPossibleMoves","name","icon","UpOutlined","INCREASE_BY_ONE","RightOutlined","PASS","DownOutlined","DECREASE_BY_ONE","PlayerControls","currentValue","gameStrategy","possibility","filter","move","isPossible","possibleMoves","calculatePossibleMoves","map","isStarted","valueStyle","prefix","NumberOutlined","index","onMoveHandler","disabled","includes","shape","size","GameBoard","moves","isHost","isAuto","mode","onMoveReceived","onMovePlayed","onStarted","isAiTurn","playAI","isFinished","selecteMove","Math","floor","random","length","window","location","href","onUserJoined","id","match","onChange","checked","changeAutoPlay","checkedChildren","unCheckedChildren","defaultChecked","dashed","before","played","after","onCancel","goToHomePage","footer","SmileOutlined","FrownOutlined","ConsoleLogger","log","console","Game","players","socket","getWebSocket","winStrategy","logger","addPlayer","player","on","USER_JOINED","reset","emit","CREATE_GAME","JOIN_GAME","play","hasWon","MOVE","handler","ROOM_CREATED","JSON","stringify","GAME_ACCEPTED","GAME_STARTED","initialValue","MOVE_RECEIVED","initalValue","INITIALIZE","io","DivideBy","DivideByPossibility","current","Number","isInteger","WinByGettingOne","valueToBeChecked","DefaultGameBuilder","buildGameStrategy","buildPossibility","buildWinStrategy","buildMode","App","build","basename","path","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb76b20a.chunk.js","sourcesContent":["import { DownOutlined, UpOutlined, RightOutlined } from '@ant-design/icons';\r\nimport { MoveObject } from './interfaces';\r\n\r\nexport const HOST = \"www.umutcankus.me:\";\r\nexport const PORT = \"80\";\r\n\r\nexport const DIVIDER = 3;\r\nexport const MIN = 10000;\r\nexport const MAX = 100000;\r\n\r\nexport enum MoveValues {\r\n    DECREASE_BY_ONE = -1,\r\n    PASS = 0,\r\n    INCREASE_BY_ONE = 1\r\n}\r\n\r\nexport const AllPossibleMoves: MoveObject[] = [\r\n    {\r\n        name: \"increaseByOne\",\r\n        title: \"Increase by One\",\r\n        icon: UpOutlined,\r\n        value: MoveValues.INCREASE_BY_ONE\r\n    },\r\n    {\r\n        name: \"pass\",\r\n        title: \"Pass\",\r\n        icon: RightOutlined,\r\n        value: MoveValues.PASS\r\n    },\r\n    {\r\n        name: \"decreaseByOne\",\r\n        title: \"Decrease by One\",\r\n        icon: DownOutlined,\r\n        value: MoveValues.DECREASE_BY_ONE\r\n    },\r\n]\r\n\r\nexport enum SocketEvent {\r\n    ROOM_CREATED = \"room-created\",\r\n    GAME_STARTED = \"game-started\",\r\n    USER_JOINED = \"user-joined\",\r\n    MOVE_RECEIVED = \"move-received\",\r\n    GAME_ACCEPTED = \"game-accepted\",\r\n    \r\n    CREATE_GAME = \"create-game\",\r\n    JOIN_GAME = \"join-game\",\r\n    MOVE = \"make-move\",\r\n    INITIALIZE = \"initialize\"\r\n}","import React from \"react\";\r\nimport \"../App.css\"\r\nimport \"./OnboardingPage.css\"\r\nimport { Popover, Button, Input } from 'antd';\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport { Game } from '../Game';\r\n\r\ninterface OnboardingPageRouterProps {\r\n}\r\n\r\ninterface OnboardingPageProps extends RouteComponentProps<OnboardingPageRouterProps> {\r\n    game: Game\r\n}\r\n\r\ninterface OnboardingPageState {\r\n    enterRoomNumberVisible: boolean;\r\n}\r\nexport class OnboardingPage extends React.Component<OnboardingPageProps, OnboardingPageState> {\r\n    game: Game = this.props.game;\r\n\r\n    constructor(props: OnboardingPageProps) {\r\n        super(props);\r\n        this.state = { enterRoomNumberVisible: false };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.game.onCreated((params) => this.moveToGameBoard(params));\r\n        this.game.onAccepted((params) =>this.moveToGameBoard(params));\r\n    }\r\n\r\n    initializeNewGame() {\r\n        this.game.create()\r\n    }\r\n\r\n    joinExistingGame(roomId) {\r\n        this.game.join(roomId);\r\n    }\r\n\r\n    moveToGameBoard(params) {\r\n        const { history } = this.props;\r\n        history.push(`/play/${params.roomId}`)\r\n    }\r\n\r\n\r\n    render() {\r\n        const { Search } = Input;\r\n\r\n        return (\r\n            <div className=\"col-12 flex v-center\">\r\n                <div className=\"col-4 onboarding-container v-center flex\">\r\n                    <div className=\"button-container w-100 flex\">\r\n                        <Button className=\"menu-button\" onClick={this.initializeNewGame.bind(this)} type=\"primary\" block>\r\n                            New Game\r\n                        </Button>\r\n                        <Popover\r\n                            content={\r\n                                <React.Fragment>\r\n                                    <Search onSearch={(value) => this.joinExistingGame(value)} placeholder=\"Room ID\" enterButton />\r\n                                </React.Fragment>\r\n\r\n                            }\r\n                            title=\"Join a Room\"\r\n                            trigger=\"click\"\r\n                            visible={this.state.enterRoomNumberVisible}\r\n                        >\r\n                            <Button className=\"menu-button\" onClick={() => this.setState({ enterRoomNumberVisible: !this.state.enterRoomNumberVisible })} block>Join</Button>\r\n                        </Popover>\r\n                        <Button className=\"menu-button\" block>Settings</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport \"../App.css\"\r\nimport \"./MoveHolder.css\"\r\nimport { Alert, Tag } from 'antd';\r\nimport ScrollIntoViewIfNeeded from 'react-scroll-into-view-if-needed';\r\n\r\ninterface MoveHolderProps {\r\n    previousValue?: number;\r\n    playedMove: number;\r\n    remainder?: number;\r\n    isSelf?: boolean;\r\n}\r\n\r\ninterface MoveHolderState {\r\n\r\n}\r\nexport class MoveHolder extends React.Component<MoveHolderProps, MoveHolderState> {\r\n\r\n    render() {\r\n        const { previousValue, playedMove, remainder, isSelf } = this.props;\r\n        return (\r\n            \r\n            <ScrollIntoViewIfNeeded className={`single-move-container ${isSelf ? 'self' : 'opponent'}`}>\r\n                {\r\n                    playedMove === -1 &&\r\n                    <React.Fragment>\r\n                        <div className=\"flex s-move-container\">\r\n                            <Alert message=\"Decreased\" type=\"error\" />\r\n                            <div className=\"calculation-container\">\r\n                                <Tag className=\"previous-tag\" color=\"magenta\">{previousValue} - {1}</Tag>\r\n                                <Tag className=\"fit\" color=\"blue\">%</Tag>\r\n                                <Tag className=\"previous-tag\" color=\"magenta\">3</Tag>\r\n                                <Tag className=\"fit\" color=\"blue\">=</Tag>\r\n                                <Tag className=\"previous-tag\" color=\"magenta\">{remainder}</Tag>\r\n                            </div>\r\n                        </div>\r\n                    </React.Fragment>\r\n\r\n                }\r\n                {\r\n                    playedMove === 0 &&\r\n                    <React.Fragment>\r\n                        <div className=\"flex s-move-container\">\r\n                            <Alert message=\"Passed\" type=\"info\" />\r\n                            <div className=\"calculation-container\">\r\n                                <Tag className=\"previous-tag\" color=\"magenta\">{previousValue} + {0}</Tag>\r\n                                <Tag className=\"fit\" color=\"blue\">%</Tag>\r\n                                <Tag className=\"previous-tag\" color=\"magenta\">3</Tag>\r\n                                <Tag className=\"fit\" color=\"blue\">=</Tag>\r\n                                <Tag className=\"previous-tag\" color=\"magenta\">{remainder}</Tag>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </React.Fragment>\r\n                }\r\n                {\r\n                    playedMove === 1 &&\r\n                    <React.Fragment>\r\n                        <div className=\"flex s-move-container\">\r\n                            <Alert message=\"Increased\" type=\"success\" />\r\n                            <div className=\"calculation-container\">\r\n                                <Tag className=\"previous-tag\" color=\"magenta\">{previousValue} + {1}</Tag>\r\n                                <Tag className=\"fit\" color=\"blue\">%</Tag>\r\n                                <Tag className=\"previous-tag\" color=\"magenta\">3</Tag>\r\n                                <Tag className=\"fit\" color=\"blue\">=</Tag>\r\n                                <Tag className=\"previous-tag\" color=\"magenta\">{remainder}</Tag>\r\n                            </div>\r\n                        </div>\r\n                    </React.Fragment>\r\n                }\r\n            </ScrollIntoViewIfNeeded>\r\n        )\r\n    }\r\n}","import { NumberOutlined } from '@ant-design/icons';\r\nimport { Button, Card, Statistic, Tooltip, Spin, Tag } from \"antd\";\r\nimport React from \"react\";\r\nimport { AllPossibleMoves } from \"../../definitions\";\r\nimport \"../../App.css\";\r\nimport \"./PlayerControls.css\";\r\nimport { Game } from '../../Game';\r\n\r\ninterface PlayerControlsProps {\r\n    game: Game;\r\n    currentValue: number;\r\n    onMoveHandler: (playedValue: number) => void;\r\n}\r\n\r\ninterface PlayerControlsState {\r\n}\r\n\r\nexport class PlayerControls extends React.Component<PlayerControlsProps, PlayerControlsState> {\r\n\r\n    calculatePossibleMoves() {\r\n        const { currentValue, gameStrategy, possibility } = this.props.game;\r\n        return  AllPossibleMoves.filter((move) => possibility.isPossible(currentValue, move.value, gameStrategy));          \r\n    }\r\n\r\n    render() {\r\n        const currentValue = this.props.currentValue;\r\n        const possibleMoves: number[] = this.calculatePossibleMoves().map((move) => move.value);\r\n        if(!this.props.game.isStarted){\r\n            return (\r\n                <Card>\r\n                        <div className=\"waiting-card\">\r\n                            <Spin className=\"spinner\" size=\"default\" />\r\n                            <div className=\"tags\">\r\n                                <Tag className=\"tag\" color=\"magenta\">Waiting for Opponent</Tag>\r\n                                <Tag className=\"tag\" color=\"magenta\">Use Auto - Play Instead?</Tag>\r\n                            </div>\r\n                        </div>\r\n                </Card>\r\n            )\r\n        }\r\n        return (\r\n            <Card>\r\n                <div className=\"current-status\">\r\n                    <Statistic\r\n                        className=\"statistics\"\r\n                        title=\"Current Value\"\r\n                        value={currentValue}\r\n                        valueStyle={{ color: '#3f8600' }}\r\n                        prefix={<NumberOutlined />}\r\n                    />\r\n                    <div className=\"controls\">\r\n                        {\r\n                            AllPossibleMoves.map((move, index) => (\r\n                                <Tooltip key={index} title={move.title}>\r\n                                    <Button onClick={() => this.props.onMoveHandler(move.value)} className=\"control-button\" disabled={!possibleMoves.includes(move.value) || !this.props.game.isSelf} type=\"primary\" shape=\"circle\" icon={< move.icon />} />\r\n                                </Tooltip>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n        )\r\n    }\r\n}","import { Button, Divider, Modal, Result, Switch, Tag } from 'antd';\r\nimport React from \"react\";\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport \"../App.css\";\r\nimport { Game } from '../Game';\r\nimport { MoveHolder } from \"../move-holder/MoveHolder\";\r\nimport \"./GameBoard.css\";\r\nimport { PlayerControls } from \"./player-controls/PlayerControls\";\r\nimport { FrownOutlined, SmileOutlined } from '@ant-design/icons';\r\nimport { MoveState } from '../interfaces';\r\nimport { AllPossibleMoves } from '../definitions';\r\n\r\ninterface GameBoardRouterProps {\r\n    id: string;\r\n}\r\n\r\ninterface GameBoardProps extends RouteComponentProps<GameBoardRouterProps> {\r\n    game: Game;\r\n}\r\n\r\ninterface GameBoardState {\r\n    isSelf: boolean;\r\n    isAuto: boolean;\r\n}\r\nexport class GameBoard extends React.Component<GameBoardProps, GameBoardState> {\r\n    game = this.props.game;\r\n    moves: MoveState[] = this.game.moves;\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isSelf: this.game.isHost,\r\n            isAuto: this.isAuto()\r\n        }\r\n    }\r\n\r\n    isAuto(){\r\n        return this.game.mode === 'auto'\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.game.onMoveReceived((params) => this.onMovePlayed(params));\r\n        this.game.onStarted(() => this.setState({...this.game, isAuto: this.isAuto()}));\r\n    }\r\n\r\n    move(value) {\r\n        this.game.move(value);\r\n    }\r\n\r\n    onMovePlayed(params) {\r\n        this.setState({...this.game, isAuto: this.isAuto()})\r\n        if (this.isAiTurn()) {\r\n            this.playAI();\r\n        }\r\n    }\r\n\r\n    isAiTurn(){\r\n        return this.isAuto() && !this.state.isSelf && !this.game.isFinished;\r\n    }\r\n\r\n    playAI(){\r\n        const { currentValue, gameStrategy, possibility } = this.props.game;\r\n        const possibleMoves = AllPossibleMoves.filter((move) => possibility.isPossible(currentValue, move.value, gameStrategy));\r\n        const selecteMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n        this.move(selecteMove.value);\r\n    }\r\n\r\n    goToHomePage(){\r\n        window.location.href = \"/\"\r\n    }\r\n\r\n    changeAutoPlay(isAuto) {\r\n       if(isAuto) {\r\n           this.props.game.mode = 'auto';\r\n           this.game.onUserJoined();\r\n       }\r\n       else{\r\n        this.props.game.mode = 'manuel';\r\n       }\r\n       this.setState({isAuto: isAuto});\r\n    }\r\n\r\n    render() {\r\n        const { id } = this.props.match.params;\r\n        return (\r\n            <div className=\"col-12 flex v-center main-container\">\r\n                <div className=\"col-4 game-board-container flex\">\r\n                    <div className=\"info\">\r\n                        <Tag className=\"game-id-tag\" color=\"blue\">{id}</Tag>\r\n                        {!this.props.game.isStarted && <Switch onChange={(checked) => this.changeAutoPlay(checked)} checked={this.state.isAuto} className=\"auto-play-switch\" checkedChildren=\"Auto Play\" unCheckedChildren=\"Auto Play\" defaultChecked />}\r\n                    </div>\r\n                    <Divider dashed ></Divider>\r\n                    <div className=\"moves flex\">\r\n                        {this.moves.map((move, index) =>\r\n                            <MoveHolder key={index} previousValue={move.before} playedMove={move.played} remainder={move.after} isSelf={move.isSelf} />\r\n                        )\r\n                        }\r\n                    </div>\r\n                    <div className=\"current-number\">\r\n                        <PlayerControls currentValue={this.game.currentValue} game={this.game} onMoveHandler={this.move.bind(this)} />\r\n                    </div>\r\n                </div>\r\n                <Modal\r\n                    title=\"The End\"\r\n                    visible={this.game.isFinished && !this.state.isSelf}\r\n                    onCancel={() => this.goToHomePage()}\r\n                    footer={[\r\n                        <Button type=\"primary\" key=\"back\" onClick={() =>  this.goToHomePage()}>\r\n                            Return to Lobby\r\n                         </Button>,\r\n\r\n                    ]}\r\n                >\r\n                    <Result\r\n                        icon={<SmileOutlined />}\r\n                        title=\"Congrats! You are the champion!\"\r\n                    />,\r\n                </Modal>\r\n                <Modal\r\n                    title=\"The End\"\r\n                    visible={this.game.isFinished && this.state.isSelf}\r\n                    onCancel={() => this.goToHomePage()}\r\n                    footer={[\r\n                        <Button type=\"primary\" key=\"back\" onClick={() => this.goToHomePage()}>\r\n                            Return to Lobby\r\n                         </Button>\r\n                    ]}\r\n                >\r\n                    <Result\r\n                        icon={<FrownOutlined />}\r\n                        title=\"Sorry, not this time.\"\r\n                    />,\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}","import { Logger } from './interfaces';\r\n\r\nexport class ConsoleLogger implements Logger {\r\n    log = (value) => console.log(value);\r\n}","import { io } from \"socket.io-client\";\r\nimport { CustomSocket } from \"./App\";\r\nimport { HOST, MAX, MIN, PORT, SocketEvent } from \"./definitions\";\r\nimport { GameMode, GameStrategy, IGame, Logger, MoveState, Player, Possibility, WinStrategy } from \"./interfaces\";\r\n\r\nexport class Game implements IGame {\r\n    possibility: Possibility;\r\n    isHost: boolean = false;\r\n    isSelf: boolean = null;\r\n    isStarted: boolean = false;\r\n    roomId: string;\r\n    isFinished: boolean = false;\r\n    players: Player[] = [];\r\n    mode: GameMode;\r\n    socket: CustomSocket = this.getWebSocket()\r\n    winStrategy: WinStrategy;\r\n    gameStrategy: GameStrategy;\r\n    currentValue: number;\r\n    moves: MoveState[] = [];\r\n    logger: Logger;\r\n\r\n    constructor(){\r\n        this.socket.on(SocketEvent.USER_JOINED, this.onUserJoined.bind(this));\r\n    }\r\n\r\n    addPlayer = (player: Player) => {\r\n        this.players.push(player);\r\n        return this.players\r\n    };\r\n\r\n    create(){\r\n        this.reset()\r\n        this.logger.log('Create Event Emitted')\r\n        this.isHost = true;\r\n        this.socket.emit(SocketEvent.CREATE_GAME);\r\n    }\r\n\r\n    join(roomId){\r\n        this.reset()\r\n        this.logger.log(`Join Event Emitted: ${roomId}`)\r\n        this.isHost = false;\r\n        this.socket.emit(SocketEvent.JOIN_GAME, { roomId: roomId });\r\n    }\r\n\r\n    move(played: number){\r\n        this.logger.log(`Move Event Emitted: ${played}`)\r\n        const playedMove = this.gameStrategy.play({\r\n            before: this.currentValue, \r\n            played: played,\r\n        });\r\n        const isFinished = this.winStrategy.hasWon(playedMove.after);\r\n        const roomId = this.roomId;\r\n        this.socket.emit(SocketEvent.MOVE, {...playedMove, isFinished: isFinished, roomId: roomId});\r\n    }\r\n\r\n    onCreated(handler){\r\n        this.socket.on(SocketEvent.ROOM_CREATED,(params) =>{\r\n            this.logger.log(`OnCreated Event Received: ${JSON.stringify(params)}`)\r\n            this.roomId = params.roomId;\r\n            if(handler) handler(params);\r\n        });\r\n    }\r\n\r\n    onAccepted(handler){\r\n        this.socket.on(SocketEvent.GAME_ACCEPTED, (params) =>{\r\n            this.logger.log(`onAccepted Event Received: ${JSON.stringify(params)}`)\r\n            this.roomId = params.roomId;\r\n            if(handler) handler(params);\r\n        });\r\n    }\r\n\r\n    onStarted(handler?){\r\n        this.socket.on(SocketEvent.GAME_STARTED, (params) => {\r\n            this.logger.log(`onStarted Event Received: ${JSON.stringify(params)}`)\r\n            this.isStarted = true;\r\n            this.isSelf = this.isHost;\r\n            this.currentValue = params.initialValue;\r\n            if(handler) handler(params)\r\n        });\r\n    }\r\n\r\n    onMoveReceived(handler?){\r\n        this.socket.on(SocketEvent.MOVE_RECEIVED, (params) => {\r\n            this.logger.log(`MoveReceived Event Received: ${JSON.stringify(params)}`)            \r\n            this.isFinished = params.isFinished;\r\n            this.currentValue = params.after;\r\n            this.moves.push({...params, isSelf: this.isSelf});\r\n            this.isSelf = !this.isSelf;\r\n            if(handler) handler(params)\r\n        })\r\n    }\r\n\r\n    onUserJoined(){\r\n        this.logger.log(`onUserJonined Event Received`)\r\n        const initalValue = Math.floor((Math.random() * MAX) + MIN);\r\n        this.logger.log(`Initialize Event Emitted`)\r\n        this.socket.emit(SocketEvent.INITIALIZE, {initialValue: initalValue, roomId: this.roomId});\r\n    }\r\n\r\n    getWebSocket(){\r\n        return io(`${HOST}${PORT}`) as CustomSocket;\r\n    }\r\n\r\n    reset(){\r\n        this.currentValue = 0;\r\n        this.isStarted = false;\r\n        this.isSelf = null;\r\n        this.isHost = false;\r\n        this.isFinished = false;\r\n        this.players = [];\r\n        this.moves = [];\r\n    }\r\n\r\n}","import { DIVIDER } from \"../definitions\";\r\nimport { GameStrategy, MoveState } from \"../interfaces\";\r\n\r\nexport class DivideBy implements GameStrategy {\r\n    play = (params: Partial<MoveState>) => {\r\n        return {\r\n            before: params.before,\r\n            played: params.played,\r\n            after: (params.before + params.played) / DIVIDER\r\n        }\r\n    }\r\n}\r\n\r\n","import { GameStrategy, Possibility } from \"../interfaces\";\r\n\r\nexport class DivideByPossibility implements Possibility {\r\n    isPossible = (current: number, value: number, gameStrategy: GameStrategy) =>Number.isInteger(gameStrategy.play({\r\n        before: current,\r\n        played: value\r\n    }).after);\r\n}","import { WinStrategy } from \"../interfaces\";\r\n\r\nexport class WinByGettingOne implements WinStrategy {\r\n    hasWon = (valueToBeChecked) => valueToBeChecked == 1;\r\n}","import { ConsoleLogger } from '../ConsoleLogger';\r\nimport { Game } from \"../Game\";\r\nimport { DivideBy } from \"../GameStrategies/DivideBy\";\r\nimport { GameBuilder, GameMode } from \"../interfaces\";\r\nimport { DivideByPossibility } from \"../Possibilities/DivideByThreePossibility\";\r\nimport { WinByGettingOne } from \"./WinByGettingOneStrategy\";\r\n\r\nexport class DefaultGameBuilder implements GameBuilder {\r\n    game = new Game()\r\n\r\n    build() {\r\n        this.game.gameStrategy = this.buildGameStrategy()\r\n        this.game.possibility = this.buildPossibility()\r\n        this.game.winStrategy = this.buildWinStrategy()\r\n        this.game.mode = this.buildMode()\r\n        this.game.logger = new ConsoleLogger();\r\n        return this.game;\r\n    }\r\n\r\n    buildGameStrategy() {\r\n        return new DivideBy()\r\n    }\r\n    buildPossibility() {\r\n        return new DivideByPossibility()\r\n    }\r\n    buildMode() {\r\n        return 'manuel' as GameMode;\r\n    }\r\n    buildWinStrategy() {\r\n        return new WinByGettingOne()\r\n    }\r\n\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport { BrowserRouter as HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport { Socket } from 'socket.io-client';\r\nimport { OnboardingPage } from './onboarding-page/OnboardingPage';\r\nimport { GameBoard } from './game-board/GameBoard';\r\nimport { DefaultGameBuilder } from './WinningStrategies/DefaultGameBuilder';\r\n\r\nexport interface CustomSocket extends Socket {\r\n  isHost: boolean;\r\n  roomId: string;\r\n}\r\n\r\nfunction App() {\r\n  const builder = new DefaultGameBuilder();\r\n  const game = builder.build()\r\n\r\n  return (\r\n    <HashRouter basename='/game-of-third'>      \r\n        <Route path=\"/\" exact render={(props) => <OnboardingPage {...props} game={game} />} />\r\n        <Route path=\"/play/:id\" render={(props) => <GameBoard {...props} game={game} />} />\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}